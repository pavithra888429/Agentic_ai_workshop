# -*- coding: utf-8 -*-
"""Multi agent.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vPSx9jaIGMfs_T0G2XoQKyUKYKypMGSv
"""

# %%
!pip install langchain langchain-google-genai google-generativeai  gradio pypdf python-docx faiss-cpu langchain-community
!pip install --upgrade google-generativeai

import os
os.environ["GOOGLE_API_KEY"] = "AIzaSyDvNMfWCpZuANiaLeJA0U0ZFhc07GOfGJ0"  # Replace with your Gemini API Key

# ‚úÖ STEP 3: Import Libraries
from PyPDF2 import PdfReader
from docx import Document
import gradio as gr

# LangChain & Gemini
from langchain.vectorstores import FAISS
from langchain_google_genai import GoogleGenerativeAIEmbeddings, ChatGoogleGenerativeAI
from langchain.chains import RetrievalQA
from langchain.docstore.document import Document as LCDocument

# ‚úÖ STEP 4: File Parsing Utilities

def extract_text_from_pdf(file):
    reader = PdfReader(file)
    return "\n".join([page.extract_text() for page in reader.pages if page.extract_text()])

def extract_text_from_docx(file):
    doc = Document(file)
    return "\n".join([para.text for para in doc.paragraphs])

def parse_uploaded_file(file):
    if file.name.endswith(".pdf"):
        return extract_text_from_pdf(file)
    elif file.name.endswith(".docx"):
        return extract_text_from_docx(file)
    else:
        return "Unsupported file type."

# ‚úÖ STEP 5: AI Agent Functions

# Agent 1: Document Parsing Agent
def document_parser_tool(doc_text: str) -> str:
    return f"üßæ Parsed Document:\n{doc_text[:1000]}..."  # Just a preview for now

# Agent 2: Matching Agent
def contract_invoice_matcher_tool(contract_info: str, invoice_info: str) -> str:
    return "üîç Mismatch Detected:\n- Delivery date conflict\n- Billed amount exceeds contract terms"

# Agent 3: RAG-Enabled Mismatch Checker
def build_rag_checker(mismatch_text: str) -> str:
    rag_docs = [
        "Invoices must not exceed contract value.",
        "Delivery date in invoice must match the contract terms.",
        "GST should be applied as per contract terms.",
        "Penalty applies if delivery is late as per contract clause 4.1."
    ]
    documents = [LCDocument(page_content=d) for d in rag_docs]

    embeddings = GoogleGenerativeAIEmbeddings(model="models/embedding-001")
    vectorstore = FAISS.from_documents(documents, embeddings)
    retriever = vectorstore.as_retriever()

    llm = ChatGoogleGenerativeAI(model="gemini-1.5-flash", temperature=0)
    rag_chain = RetrievalQA.from_chain_type(llm=llm, retriever=retriever)

    return rag_chain.run(mismatch_text)

# Agent 4: Compliance Summary Agent
def compliance_summary_tool(mismatches: str) -> str:
    return f"""‚úÖ Compliance Summary Report:
- Detected Issues:
{mismatches}
- Recommendation: Please verify billing and delivery terms with the vendor.
- Status: ‚ö†Ô∏è Needs Review
"""

# ‚úÖ STEP 6: Main Pipeline Function for Gradio

def run_pipeline(contract_file, invoice_file):
    try:
        contract_text = parse_uploaded_file(contract_file)
        invoice_text = parse_uploaded_file(invoice_file)

        parsed_contract = document_parser_tool(contract_text)
        parsed_invoice = document_parser_tool(invoice_text)

        mismatches = contract_invoice_matcher_tool(parsed_contract, parsed_invoice)

        rag_result = build_rag_checker(mismatches)

        report = compliance_summary_tool(rag_result)

        return report
    except Exception as e:
        return f"‚ùå Error: {str(e)}"

# ‚úÖ STEP 7: Launch Gradio App

gr.Interface(
    fn=run_pipeline,
    inputs=[
        gr.File(label="Upload Contract (.pdf or .docx)"),
        gr.File(label="Upload Invoice (.pdf or .docx)")
    ],
    outputs=gr.Textbox(label="üìÑ Compliance Report"),
    title="Contract‚ÄìInvoice Compliance Checker (Multi-Agent AI)",
    description="Upload a contract and an invoice to check for discrepancies using 4 AI agents."
).launch()