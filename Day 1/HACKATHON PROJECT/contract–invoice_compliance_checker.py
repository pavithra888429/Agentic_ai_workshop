# -*- coding: utf-8 -*-
"""Contract‚ÄìInvoice Compliance Checker

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mX47SlayfszymvLE3Hd0kqPTiguRXLB5
"""

from IPython import get_ipython
from IPython.display import display

!apt-get update
!apt-get install fonts-dejavu

!pip install -U gradio PyPDF2 langchain langchain-google-genai google-generativeai duckduckgo-search langchain-community docarray fpdf

import os
os.environ["GOOGLE_API_KEY"] = "AIzaSyDhcQi6ThHwgBAT2Z7_KnCOT1Xfcj96iXY"  # Replace with your Gemini API Key

from google.colab import files

print("üìÅ Please upload the contract PDF:")
contract_file = files.upload()

print("üìÅ Now upload the invoice PDF:")
invoice_file = files.upload()

from PyPDF2 import PdfReader

def extract_text_from_pdf(uploaded_file_dict):
    filename = list(uploaded_file_dict.keys())[0]
    reader = PdfReader(filename)
    return "\n".join(page.extract_text() for page in reader.pages)

contract_text = extract_text_from_pdf(contract_file)
invoice_text = extract_text_from_pdf(invoice_file)

from langchain_google_genai import ChatGoogleGenerativeAI
from langchain.chains import LLMChain
from langchain.prompts import PromptTemplate

llm = ChatGoogleGenerativeAI(model="models/gemini-1.5-flash-latest", temperature=0.2)

# Sample mini legal KB
legal_clauses = [
    "All invoices must match contracted unit price and quantity.",
    "A penalty of 1% per day applies for late delivery past the deadline.",
    "Force Majeure means vendor is not liable for delays due to natural disasters.",
    "Interest may be charged on payment delays exceeding 30 days.",
    "Disputes are subject to arbitration under Indian Arbitration Act, 1996."
]

from langchain.vectorstores import DocArrayInMemorySearch
# Change the import path for GoogleGenerativeAIEmbeddings
from langchain_google_genai import GoogleGenerativeAIEmbeddings
from langchain.schema import Document

# Prepare document objects
docs = [Document(page_content=clause) for clause in legal_clauses]

# Create in-memory vector index
embeddings = GoogleGenerativeAIEmbeddings(model="models/embedding-001")
vectorstore = DocArrayInMemorySearch.from_documents(docs, embeddings)

# Retrieve relevant legal context
retriever = vectorstore.as_retriever()
legal_context_docs = retriever.get_relevant_documents(f"{contract_text} {invoice_text}")
relevant_clauses = "\n".join(doc.page_content for doc in legal_context_docs)

rag_prompt = PromptTemplate(
    input_variables=["contract", "invoice", "legal_clauses"],
    template="""
You are a Contract‚ÄìInvoice Compliance Checker AI.

Compare the CONTRACT and INVOICE.
Also consider the LEGAL CLAUSES provided.

Identify:
- Overbilling or pricing mismatch
- Delivery delays
- Missing/extra items
- Legal clause violations

Respond with a clear compliance report.

--- CONTRACT ---
{contract}

--- INVOICE ---
{invoice}

--- LEGAL CLAUSES ---
{legal_clauses}
"""
)

rag_chain = LLMChain(llm=llm, prompt=rag_prompt)

report = rag_chain.run({
    "contract": contract_text,
    "invoice": invoice_text,
    "legal_clauses": relevant_clauses
})

print("üìã Final Compliance Report:\n")
print(report)
from IPython.display import Markdown, display
display(Markdown(f"```\n{report}\n```"))

from fpdf import FPDF
from datetime import datetime
from google.colab import files
import os

# üîΩ Step 1: Paste your full report below (everything between triple quotes)
report = """
üìã Final Compliance Report:

**Compliance Report: Contract ID CON-2025-045**

**Contract:** CON-2025-045 between Alpha Solutions Ltd. and XYZ Technologies Pvt. Ltd.

**Invoice:** INV-2025-789

**Date of Report:** October 26, 2025

**1. Overbilling or Pricing Mismatch:**

* **Finding:** The invoice shows a unit price of Rs. 52,000, exceeding the contracted price of Rs. 50,000 by Rs. 2,000 per unit. This results in an overbilling of Rs. 2,00,000 (Rs. 2,000 x 100 units). This is a direct violation of the contract's pricing terms and the legal clause specifying that invoices must match the contracted unit price.

**2. Delivery Delays:**

* **Finding:** The contract stipulated a delivery deadline of May 15, 2025. The invoice indicates delivery on May 25, 2025, a delay of 10 days. This triggers a late delivery penalty.

**3. Missing/Extra Items:**

* **Finding:** No discrepancies in the quantity of items delivered are noted. The invoice matches the contract's specified quantity of 100 laptops.

**4. Legal Clause Violations:**

* **Finding:** The overbilling constitutes a clear violation of the legal clause requiring invoices to match the contracted unit price and quantity. The late delivery also triggers the penalty clause as outlined in the contract. No other legal clause violations are apparent.

**Penalty Calculation:**

* Late delivery penalty: 10 days delay * 1% per day * Rs. 50,00,000 (original contract value) = Rs. 50,000

**Summary of Findings:**

* **Overbilling:** Rs. 2,00,000
* **Late Delivery Penalty:** Rs. 50,000
* **Total Amount Due (excluding overbilling):** Rs. 50,00,000 (original contract value)

**Recommendations:**

* Alpha Solutions Ltd. should immediately dispute the overbilling of Rs. 2,00,000 with XYZ Technologies Pvt. Ltd., citing the contract's pricing terms and the relevant legal clause.
* Alpha Solutions Ltd. should deduct the late delivery penalty of Rs. 50,000 from the payment to XYZ Technologies Pvt. Ltd.
* If the dispute cannot be resolved amicably, both parties should proceed with arbitration as per the Indian Arbitration Act, 1996.

This report is for informational purposes only and does not constitute legal advice. It is recommended that Alpha Solutions Ltd. seek legal counsel for further guidance.
"""

# Remove the emoji from the start of the report
report_clean = report.strip()
if report_clean.startswith("üìã"):
    report_clean = report_clean[1:].strip()


# üîΩ Step 2: Generate the PDF
pdf = FPDF()
pdf.add_page()
pdf.set_font("Arial", size=12)
# Use the cleaned report for the title if it still starts with the expected text
if report_clean.startswith("Final Compliance Report:"):
     pdf.cell(200, 10, txt=report_clean.split('\n')[0], ln=True, align='C')
     # Remove the first line (which was used as the title) before adding the rest
     report_lines = report_clean.split('\n')[1:]
else:
     pdf.cell(200, 10, txt="Compliance Report", ln=True, align='C')
     report_lines = report_clean.split('\n')

pdf.ln(10)

# Add each line from the cleaned report
for line in report_lines:
    pdf.multi_cell(0, 10, line)

# üîΩ Step 3: Save and Download
filename = f"compliance_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
path = f"/mnt/data/{filename}"
pdf.output(path)

# üîΩ Step 4: Trigger download in Colab
files.download(path)