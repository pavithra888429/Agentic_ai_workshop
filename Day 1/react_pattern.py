# -*- coding: utf-8 -*-
"""ReAct Pattern.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gv4dC376GvKjgyk6CurUoqPh5-7qPljE
"""

# ‚úÖ Install required packages
!pip install google-generativeai tavily-python --quiet

# ‚úÖ Imports
import google.generativeai as genai
from tavily import TavilyClient
from IPython.display import Markdown, display

# ‚úÖ Setup Gemini (replace with your own key)
genai.configure(api_key="AIzaSyAB9SBH2I1LC6kmtoHsZ0zm1dIeUprypeM")
model = genai.GenerativeModel("gemini-1.5-flash")

# ‚úÖ Agent Class
class WebResearchAgent:
    def __init__(self, topic, gemini_model, tavily_key):
        self.topic = topic
        self.model = gemini_model
        self.client = TavilyClient(api_key=tavily_key)
        self.questions = []
        self.answers = []

    def generate_questions(self):
        prompt = f"Generate 5-6 research questions about: {self.topic}"
        response = self.model.generate_content(prompt)
        raw_lines = response.text.strip().split("\n")
        self.questions = [line.strip("- ").strip() for line in raw_lines if line.strip()]
        print("üß† Generated Questions:\n", self.questions)

    def search_web(self):
        for question in self.questions:
            try:
                results = self.client.search(query=question, search_depth="advanced", max_results=3)
                content = "\n".join([f"- {res['title']}: {res['content']}" for res in results["results"]])
                self.answers.append({"question": question, "content": content})
            except Exception as e:
                print(f"‚ùå Error for question: {question}\n{e}")
                self.answers.append({"question": question, "content": "Error fetching results."})

    def compile_report(self):
        report = f"# Web Research Report: {self.topic}\n\n## Introduction\nResearch on the topic \"{self.topic}\" was conducted using an AI agent that uses Gemini for reasoning and Tavily for action.\n\n"
        for entry in self.answers:
            report += f"## {entry['question']}\n{entry['content']}\n\n"
        report += "## Conclusion\nThis report summarizes insights gathered using LLM reasoning and real-time web search.\n"
        return report

# ‚úÖ Run the Agent
topic = "Impacts of Generative AI in Education"
agent = WebResearchAgent(topic=topic, gemini_model=model, tavily_key="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")

agent.generate_questions()
agent.search_web()
final_report = agent.compile_report()

# ‚úÖ Display the Report
display(Markdown(final_report))