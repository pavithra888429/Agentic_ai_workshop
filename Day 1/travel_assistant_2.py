# -*- coding: utf-8 -*-
"""Travel Assistant 2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16FVqgtN6G7v7Cn0Kk90l-KrOfohezRjg
"""

!pip install gradio PyPDF2 langchain langchain-google-genai google-generativeai duckduckgo-search

import os
os.environ["GOOGLE_API_KEY"] = "AIzaSyCy5MRUXEH35oAJNqIc_0wyQ68lCxiPhO4"

from langchain.agents import AgentExecutor, create_tool_calling_agent
from langchain.tools import tool
from langchain_google_genai import ChatGoogleGenerativeAI
from duckduckgo_search import DDGS
import requests

WEATHER_API_KEY = "ef8a717e166341de947110323251406"

@tool
def get_weather(location: str) -> str:
    """Returns the current weather for a given city using WeatherAPI."""
    url = f"http://api.weatherapi.com/v1/current.json?key={WEATHER_API_KEY}&q={location}&aqi=no"
    response = requests.get(url)
    if response.status_code != 200:
        return f"Error fetching weather for {location}."
    data = response.json()
    condition = data["current"]["condition"]["text"]
    temp_c = data["current"]["temp_c"]
    return f"The current weather in {location} is {condition}, with a temperature of {temp_c}Â°C."

@tool
def top_attractions(city: str) -> str:
    """Returns top attractions in the given city."""
    with DDGS() as ddgs:
        results = ddgs.text(f"Top tourist attractions in {city}", max_results=5)
    return "\n".join([res["title"] + ": " + res["body"] for res in results])

from langchain_core.prompts import ChatPromptTemplate

llm = ChatGoogleGenerativeAI(model="gemini-1.5-flash", temperature=0.3)

tools = [get_weather, top_attractions]

# Define the prompt template
prompt = ChatPromptTemplate.from_messages([
    ("system", "You are a helpful assistant that can access external tools."),
    ("human", "{input}"),
    ("placeholder", "{agent_scratchpad}"),
])

# Create the agent with the prompt
agent = create_tool_calling_agent(llm, tools, prompt)
agent_executor = AgentExecutor(agent=agent, tools=tools, verbose=True)

destination = input("Enter your destination: ")
agent_executor.invoke({"input": f"Tell me the current weather and top attractions in {destination}."})